#+TITLE: NitishTalks Emacs Config
#+AUTHOR: Nitish Kumar Pattanaik

* Startup Performance

  #+begin_src emacs-lisp

;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

(defun efs/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                     (time-subtract after-init-time before-init-time)))
           gcs-done))

(add-hook 'emacs-startup-hook #'efs/display-startup-time)


  #+end_src
* PACKAGE MANAGEMENT
** Package System Setup
   Emacs has a built in package manager but it doesn’t make it easy to automatically install packages on a new system the first time you pull down your configuration.

   #+begin_src emacs-lisp
      (require 'package)
   (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			    ("org" . "https://orgmode.org/elpa/")
			    ("elpa" . "https://elpa.gnu.org/packages/")))
   (package-initialize)
   (unless package-archive-contents
     (package-refresh-contents))

   #+end_src 

** Installing use-package
 [[https://github.com/jwiegley/use-package][use-package]] is a really helpful package used in this configuration to make it a lot easier to automate the installation and configuration of everything else we use.
   
   #+begin_src emacs-lisp
   (unless (package-installed-p 'use-package)
      (package-install 'use-package))

    (require 'use-package)
    (setq use-package-always-ensure t)
   #+end_src
** Automatic Package Updates
   The auto-package-update package helps us keep our Emacs packages up to date! It will prompt you after a certain number of days either at startup or at a specific time of day to remind you to update your packages.

You can also use ~M-x auto-package-update-now~ to update right now!

#+begin_src emacs-lisp

  (use-package auto-package-update
    :ensure t
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))


#+end_src
* SET UTF-8 EVERYWHERE

** Line Feed Instead Of Carriage return


   #+begin_src emacs-lisp
   (setq-default buffer-file-coding-system 'utf-8-unix)
   #+end_src

** UTF-8 Everywhere
   #+begin_src emacs-lisp
   (set-terminal-coding-system 'utf-8)
(set-language-environment 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(setq locale-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
   #+end_src

** General Keybindings
General.el allows us to set keybindings.  As a longtime Doom Emacs user, I have grown accustomed to using SPC as the prefix key.  General makes setting keybindings (especially with SPC) much easier.  All of the keybindings we set later in the config depend on general being loaded.

#+begin_src emacs-lisp
(use-package general
  :ensure t
  :config
  (general-evil-setup t))
#+end_src

  
* FONTS
  I am using the Fira Code and Cantarell fonts for this configuration which will more than likely need to be installed on your machine. Both can usually be found in teh various Linux distro package managers or dowloaded from the below links. Here FiraCode Nerd Font refers to the Retina font face of the fira code font. And I'm using it on Windows.
[[https://github.com/tonsky/FiraCode][Fira Code Retina]] 
  #+begin_src emacs-lisp
  (set-face-attribute 'default nil
            :font "FiraCode Nerd Font 11"
	    :weight 'medium)
  (set-face-attribute 'variable-pitch nil
            :font "FiraCode Nerd Font 11"
	    :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
            :font "Cantarell 11"
	    :weight 'regular)

  ;;(setq-default line-spacing 0.10)

  ;; Needed if using emacsclient, Otherwise, your fonts will be smaller tha expected.
  (add-to-list 'default-frame-alist '(font . "FiraCode Nerd Font 11"))
  #+end_src

* BUFFER And BOOKMARkS Keybindigs set

  I will do it later in future. First I want to learn all the keybindings of the GNU/Emacs(default keybindings).

* Command Log Mode

  [[https://github.com/lewang/command-log-mode][command-log-mode]] is useful for displaying a panel showing each key binding you use in a panel on the right side of the frame. Great for live streams and screencasts!
  #+begin_src emacs-lisp
  (use-package command-log-mode
  :commands command-log-mode)
  #+end_src
* DASHBOARD
** Dependencies
*** all-the-icons
In windows, you have to install manually all the fonts downloaded by all-the-icons package, in your choosen directory. Just install that, and you are done.
But in linux, it is so easy. You don't need to manually install fonts. It installs font automatically in /usr/share/fonts directory.
  #+begin_src emacs-lisp
  (use-package all-the-icons
   :ensure t)
  #+end_src
*** Projectile
    This part is very much essential. Don't just write use-package projectile. This doesn't work. Just copy this snippet from the official projectile website. Don't mess with it. Otherwise you can't access projectile.

    [[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it a lot easier to navigate around code projects for various language. Many packages integrate with Projectile so it's a good ideas to have it installed even if you don't use it commands directly.
    #+begin_src emacs-lisp
   (use-package projectile
  :ensure t
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("s-p" . projectile-command-map)
              ("C-c p" . projectile-command-map)))
   #+end_src



*** page-break-lines
 not in need now..

** Dashboard Code
   After writing this code just save it and load-file ~/.emacs.d/init.el file. Theen create a new buffer by C-x b named as *dashboard* and refresh that buffer with the command M-x dashboard-refresh-buffer. Then you can see all your customized dashboard. That's it. Nothing else you have to do. ENJOY!
   #+begin_src emacs-lisp
     (use-package dashboard
       :ensure t
       :init
       (progn
	 (setq dashboard-items '((recents . 5)
				 (agenda . 5)
				 (bookmarks . 3)
				 (projects . 3)
				 (registers . 3)))
	 (setq dashboard-set-heading-icons t)
	 (setq dashboard-set-file-icons t)
	 (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
         ;; (setq dashboard-set-navigator t)
;;	 (setq dahsboard-startup-banner "  c:/Users/Patta/AppData/Roaming/.emacs.d/emacs-logo-transparent.png")
(setq dashboard-startup-banner "~/.emacs.d/emacs-logo-transparent.png")
 (setq dashboard-center-content nil)
	 )
       :config
       (dashboard-setup-startup-hook))
   #+end_src
* Zooming IN and OUT
You can use the bindings CTRL plus =/- for zooming in/out. You can also use CTRL plus
the mouse scroll for zooming in and out.

  #+begin_src emacs-lisp
  ;; zoom in/out like we do everywhere else.
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  ;;
  #+end_src


* Graphical User Interface Settings

** Disable Menu, Tool and scroll bar
  #+begin_src emacs-lisp
  ;;(menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  #+end_src

** Display Line Numbers and Truncated Lines
  #+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)
  #+end_src


* THEME
[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety an support for many different Emacs modes. You can also run ~M-x counsel-load-theme~ to choose between them easily.
  #+begin_src emacs-lisp
  (use-package doom-themes
     :ensure t)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	doom-themes-enable-italic t) ; if nil, italic is universally disabled
;;  (load-theme 'doom-one t)
  (load-theme 'doom-palenight t)
  #+end_src

* Doom MODE_LINE
[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs. The default configuration is quite good but can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

*NOTE*: The first time ou load your configuration on a new machine, you'll need to run 'M-x all-the-icons-install-fonts' so that mode line icons display correctly. Hence it need all-the-icons package( I already installed)

  #+begin_src emacs-lisp
  (use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))
  #+end_src

* WHICK KEY
[[https://github.com/justbur/emacs-which-key][whick-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all passible completions for the prefix. For example, if you press ~C-c~ a panel will appear at the botton of the frame displaying all of the bindings under that prefix and which command they run. This is very useful for learning the possible key bindings in the mode of your current buffer.

  #+begin_src emacs-lisp
(use-package which-key
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 1))
  #+end_src

* PowerShell Integration In Emacs

#+begin_src emacs-lisp
(defun run-powershell ()
  "Run powershell"
  (interactive)
  (async-shell-command "c:/windows/system32/WindowsPowerShell/v1.0/powershell.exe -Command -"
               nil
               nil))
#+end_src

* ORG CONFIGURATION
** Org-Bullets
org-bullets replaces the heading stars in org-mode buffers with nicer looking characters that you can control. Another option for this is org-superstar-mode which we may cover in a later video.

#+begin_src emacs-lisp
 (use-package org-bullets
  :ensure t
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src


** Structure Templates
Org Mode’s structure templates feature enables you to quickly insert code blocks into your Org files in combination with org-tempo by typing  followed by the template name like <el or <py and then press TAB. For example, to insert an empty emacs-lisp block below, you can type <el and press TAB to expand into such a block.

You can add more src block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language as it is known by Org Babel.


| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |


#+begin_src emacs-lisp

(with-eval-after-load 'org
  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python")))

#+end_src

*** Source Code Block Syntax Highlighting
We want the same syntax highlighting in source blocks as in the native language files.

#+begin_src emacs-lisp
(setq org-src-fontify-natively t
    org-src-tab-acts-natively t
    org-confirm-babel-evaluate nil
    org-edit-src-content-indentation 0)
#+end_src


* SHELLS WITHIN EMACS

** Eshell
Eshell is an Emacs 'shell' that is written in Elisp.

#+begin_src emacs-lisp
(use-package eshell-syntax-highlighting
  :ensure t
  :after esh-mode
  :config
  (eshell-syntax-highlighting-global-mode +1))

(setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
      eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
      eshell-history-size 5000
      eshell-buffer-maximum-lines 5000
      eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-input t
      eshell-destroy-buffer-when-process-dies t
)
#+end_src


** Vterm
Vterm is a terminal emulator within Emacs. The 'shell-file-name' settings sets the shell to be used in M-x shell, M-x term, M-x ansi-term and M-x vterm. By default, the shell is set to "cmd" but could change it to "pwsh" if you prefer.


# We can't install vterm in windows 10 for now. Development is on progress. So let's see it in future.

* IVY and Counsel

[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs. It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs. Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide useful commands for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][Ivy-rich]] adds extra columns to a few of the Counsel Commands to provide more information about each item.

#+begin_src emacs-lisp

(use-package ivy

  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package ivy-rich

  :after ivy
  :init
  (ivy-rich-mode 1))

(use-package counsel

  :bind (("C-M-j" . 'counsel-switch-buffer) 
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))


  :config
  (counsel-mode 1))


#+end_src


* Helpful Help Commands
  [[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs’ describe- command buffers. For example, if you use describe-function, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration. It is very useful for figuring out how things work in Emacs.

  #+begin_src emacs-lisp

(use-package helpful
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))


  #+end_src



* DEVELOPMENT
** Languages
*** IDE Features With lsp-mode
**** lsp-mode
     We use the excellent [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable IDE-like functionality for many different programming languages via “language servers” that speak the [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]]. Before trying to set up =lsp-mode= for a particular language, check out the [[Y][documetation for your language]] so that you can learn which language servers are available and how to install them.

     The ~lsp-keymap-prefix~ setting enables you to define a prefix for where ~lsp-mode~'s default keybindings will be added. I *hight recommend* using the prefix to find out what you can do with ~lsp-mode~ in a buffer.

     The =which-key= integration adds helpful descriptios of the various keys so you should be able to learn a lot just by pressing ~C-c l~ in a =lsp-mode= buffer and trying different things that you find there.

     #+begin_src emacs-lisp

(defun efs/lsp-mode-setup ()
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  (lsp-headerline-breadcrumb-mode))

(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook (lsp-mode . efs/lsp-mode-setup)
  :init
  (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
  :config
  (lsp-enable-which-key-integration t))


     #+end_src
**** lsp-ui
     [[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of =lsp-mode= which make Emacs feel even more like an IDE. Check out the screenshots on the =lsp-ui= homepage(linked at the beginning of this paragraph) to see examples of what it can do.
     #+begin_src emacs-lisp
(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-ui-doc-position 'bottom))
     #+end_src
**** lsp-treemacs
     [[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of your code like symbols in a file, references of a symbol, or diagnostic messages(errors and warnings) that are found in your code.

     Try these commands with =M-x=:

     -> ~lsp-treemacs-symbols~ - Show a tree view of the symbols in the currents file
     -> ~lsp-treemacs-references~ - Show a tree view for the references of the symbol under the cursor.
     -> ~lsp-treemacs-error-list~ - Show a tree view for the diagnostic messages in the project.

     This package is built on the [[https://github.com/Alexander-Miller/treemacs][treemacs]] package which might be of some interest to you if you like to have a file browser at the left side of your screen in your editor.
     #+begin_src emacs-lisp
     (use-package lsp-treemacs
       :after lsp)
     #+end_src
**** lsp-ivy
     [[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with =lsp-mode= to make it easy to  search for things by name in your code. When you run these commands, a prompt will appear in the minibuffer allowing you to type part of the name of a symbol in your code. Results will be populated in the minibuffer so that you can find what you’re looking for and jump to that location in the code upon selecting the result.
     Try these commands with =M-x=:
     -> ~lsp-ivy-workspace-symbol~ - Search for a symbol name in the current project workspace
     -> ~lsp-ivy-global-workspace-symbol~ - Search for a symbol name in all active project workspaces

     #+begin_src emacs-lisp
     (use-package lsp-ivy
       :after lsp)
     #+end_src

*** Debugging with dap-mode
    [[https://emacs-lsp.github.io/dap-mode/][dap-mode]] is an excellent package for bringing rich debugging capabilities to Emacs via the [[https://microsoft.github.io/debug-adapter-protocol/][Debug Adapter Protocol]]. You should check out the [[https://emacs-lsp.github.io/dap-mode/page/configuration/][configuration docs]] to learn how to configure the debugger for your language. Also make sure to check out the documentation for the debug adapter to see what configuration parameters are available to use for our debug templates!

    #+begin_src emacs-lisp

(use-package dap-mode
  ;; Uncomment the config below if you want all UI panes to be hidden by default!
  ;; :custom
  ;; (lsp-enable-dap-auto-configure nil)
  ;; :config
  ;; (dap-ui-mode 1)
  :commands dap-debug
  :config
  ;; Set up Node debugging
  (require 'dap-node)
  (dap-node-setup) ;; Automatically installs Node debug adapter if needed

  ;; Bind `C-c l d` to `dap-hydra` for easy access
  (general-define-key
    :keymaps 'lsp-mode-map
    :prefix lsp-keymap-prefix
    "d" '(dap-hydra t :wk "debugger")))


    #+end_src

    
*** Python
    We use =lsp-mode= and =dap-mode= to provide a more complete development environment for Python in Emacs. Check out the =pyls= [[https://emacs-lsp.github.io/lsp-mode/page/lsp-pyls/][configuration]] in the =lsp-mode=!
    ~pip install --user "pythin-language-server[all]"~
    There are a number of other language servers for Python so if you find that =pyls= doesn't work for you, consult the =lsp-mode= [[https://emacs-lsp.github.io/lsp-mode/page/languages/][language configuration documentation]] to try the others!
    #+begin_src emacs-lisp
    (use-package python-mode
      :ensure t
      :hook (python-mode . lsp-deferred)
      :custom
      ;;NOTE: Set these if python 3 is called "python3" on your system!
      ;; (python-shell-interpreter "python3")
      ;; (dap-python-executable "python3")
      (dap-python-debugger 'debugpy)
      :config
      (require 'dap-python))
    #+end_src

    You can use the pyvenv package to use =virtualenv= environments in Emacs. The =pyvenv-activate= command should configure Emacs to cause =lsp-mode= and =dap-mode= to use the virtual environment when they are loaded, just select the path to your virtual environment before loading your project.

    #+begin_src emacs-lisp
    (use-package pyvenv
      :after python-mode
      :config
      (pyvenv-mode 1))
    #+end_src

*** Company Mode
    [[http://company-mode.github.io/][Company Mode]] providers a nicer in-buffer completio interface than =completion-at-point= which is more reminiscent of what you would expect from an IDE. We add a simple configuration to make the keybindigs a little more useful(=TAB= now completes teh selection and initiates completion at the current location if needed.
    We also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with icons and better overall presentation.
    #+begin_src emacs-lisp
    (use-package company
      :after lsp-mode
      :hook (lsp-mode . company-mode)
      :bind (:map company-active-map
	     ("<tab>" . company-complete-selection))
	    (:map lsp-mode-map
	     ("<tab>". company-indent-or-complete-common))
      :custom
      (company-minimum-prefix-length 1)
      (company-idle-delay 0.0))

    (use-package company-box
      :hook (company-mode . company-box-mode))
    #+end_src

* 

* 

* 

* 

* 

* LAST: RUNTIME PERFORMANCE
  Dial the GC threshold back down so that garbage collection happends more frequently but in less time.

  #+begin_src emacs-lisp
  ;;Make gc pauses faster by decreasing the threshold.
(setq gc-cons-threshold (* 2 1000 1000))
  #+end_src
