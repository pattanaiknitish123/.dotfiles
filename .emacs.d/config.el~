(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
			 ("org" . "https://orgmode.org/elpa/")
			 ("elpa" . "https://elpa.gnu.org/packages/")))
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

(unless (package-installed-p 'use-package)
   (package-install 'use-package))

 (require 'use-package)
 (setq use-package-always-ensure t)

(use-package auto-package-update
  :ensure t
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "09:00"))

(setq-default buffer-file-coding-system 'utf-8-unix)

(set-terminal-coding-system 'utf-8)
(set-language-environment 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(setq locale-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)

(use-package general
  :ensure t
  :config
  (general-evil-setup t))

(set-face-attribute 'default nil
          :font "FiraCode Nerd Font 11"
	  :weight 'medium)
(set-face-attribute 'variable-pitch nil
          :font "FiraCode Nerd Font 11"
	  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
          :font "Cantarell 11"
	  :weight 'regular)

;;(setq-default line-spacing 0.10)

;; Needed if using emacsclient, Otherwise, your fonts will be smaller tha expected.
(add-to-list 'default-frame-alist '(font . "FiraCode Nerd Font 11"))

(use-package command-log-mode
:commands command-log-mode)

(use-package all-the-icons
 :ensure t)

(use-package projectile
:ensure t
:init
(projectile-mode +1)
:bind (:map projectile-mode-map
            ("s-p" . projectile-command-map)
            ("C-c p" . projectile-command-map)))

(use-package dashboard
       :ensure t
       :init
       (progn
	 (setq dashboard-items '((recents . 5)
				 (agenda . 5)
				 (bookmarks . 3)
				 (projects . 3)
				 (registers . 3)))
	 (setq dashboard-set-heading-icons t)
	 (setq dashboard-set-file-icons t)
	 (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
         ;; (setq dashboard-set-navigator t)
;;	 (setq dahsboard-startup-banner "  c:/Users/Patta/AppData/Roaming/.emacs.d/emacs-logo-transparent.png")
;;(setq dashboard-startup-banner "~/.emacs.d/emacs-logo-transparent.png")
 (setq dashboard-center-content nil)
	 )
       :config
       (dashboard-setup-startup-hook))

;; zoom in/out like we do everywhere else.
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
;;

;;(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

(global-display-line-numbers-mode 1)
(global-visual-line-mode t)

(use-package doom-themes
   :ensure t)
(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
      doom-themes-enable-italic t) ; if nil, italic is universally disabled
(load-theme 'doom-one t)

(use-package doom-modeline
:init (doom-modeline-mode 1)
;; :custom ((doom-modeline-height 15)))

(use-package which-key
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 1))

(defun run-powershell ()
  "Run powershell"
  (interactive)
  (async-shell-command "c:/windows/system32/WindowsPowerShell/v1.0/powershell.exe -Command -"
               nil
               nil))

(use-package org-bullets
 :ensure t
 :hook (org-mode . org-bullets-mode)
 :custom
 (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

(with-eval-after-load 'org
  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python")))

(setq org-src-fontify-natively t
    org-src-tab-acts-natively t
    org-confirm-babel-evaluate nil
    org-edit-src-content-indentation 0)

(use-package eshell-syntax-highlighting
  :ensure t
  :after esh-mode
  :config
  (eshell-syntax-highlighting-global-mode +1))

(setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
      eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
      eshell-history-size 5000
      eshell-buffer-maximum-lines 5000
      eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-input t
      eshell-destroy-buffer-when-process-dies t
)

(use-package ivy

  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package ivy-rich

  :after ivy
  :init
  (ivy-rich-mode 1))

(use-package counsel

  :bind (("C-M-j" . 'counsel-switch-buffer) 
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))


  :config
  (counsel-mode 1))

(use-package helpful
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
